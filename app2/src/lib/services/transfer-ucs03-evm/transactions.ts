import { Effect } from "effect"
import {
  encodeAbiParameters,
  type Hash,
  type WaitForTransactionReceiptErrorType,
  type WriteContractErrorType
} from "viem"
import { WaitForTransactionReceiptError, WriteContractError } from "./errors.ts"
import { getPublicClient, getWalletClient } from "../evm/clients.ts"
import { getAccount } from "$lib/services/transfer-ucs03-evm/account.ts"
import { ucs03ZkgmAbi } from "$lib/abi/ucs03.ts"
import type { Chain } from "$lib/schema/chain.ts"
import type { ValidTransfer } from "$lib/schema/transfer-args.ts"
import { generateSalt } from "$lib/services/shared"
import { sepolia } from "viem/chains"

export const submitTransfer = (chain: Chain, transfer: ValidTransfer["args"]) =>
  Effect.gen(function* () {
    if (transfer.sourceRpcType !== "evm") {
      return yield* Effect.fail(new Error("Only EVM transfers are supported"))
    }

    const walletClient = yield* getWalletClient(chain)
    const account = yield* Effect.flatMap(getAccount, account =>
      account ? Effect.succeed(account) : Effect.fail(new Error("No account connected"))
    )
    const salt = yield* generateSalt

    console.log({
      account: account.address as `0x${string}`,
      abi: ucs03ZkgmAbi,
      chain: transfer.sourceChain.value,
      functionName: "send",
      address: transfer.ucs03address,
      // value: BigInt(0.0080085 * 10 ** 18),
      args: [
        transfer.sourceChannelId,
        transfer.timeoutHeight,
        transfer.timeoutTimestamp,
        salt,
        "0x0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000014E6831e169d77a861A0E71326AFA6d80bCC8Bc6aA0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014E6831e169d77a861A0E71326AFA6d80bCC8Bc6aA000000000000000000000000000000000000000000000000000000000000000000000000000000000000001474d5b8eacfeb0dadaaf66403f40e304b3ef968b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d756e6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d756e6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001474d5b8eacfeb0dadaaf66403f40e304b3ef968b3000000000000000000000000"
      ]
    })

    return yield* Effect.tryPromise({
      try: () => {
        return walletClient.writeContract({
          account: account.address as `0x${string}`,
          abi: ucs03ZkgmAbi,
          chain: sepolia,
          functionName: "send",
          address: transfer.ucs03address as `0x${string}`,
          // value: BigInt(0.0080085 * 10 ** 18),
          args: [
            transfer.sourceChannelId,
            transfer.timeoutHeight,
            BigInt(transfer.timeoutTimestamp),
            salt,
            {
              version: 1,
              opcode: 3,
              operand:
                "0x0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001a40000000000000000000000000000000000000000000000000000000000000014E6831e169d77a861A0E71326AFA6d80bCC8Bc6aA0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014E6831e169d77a861A0E71326AFA6d80bCC8Bc6aA000000000000000000000000000000000000000000000000000000000000000000000000000000000000001474d5b8eacfeb0dadaaf66403f40e304b3ef968b300000000000000000000000000000000000000000000000000000000000000000000000000000000000000046d756e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003554e4f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001474d5b8eacfeb0dadaaf66403f40e304b3ef968b3000000000000000000000000"
            }
          ]
        })
      },
      catch: err => {
        console.error("write contract error", err)
        return new WriteContractError({ cause: err as WriteContractErrorType })
      }
    })
  })

export const waitForTransferReceipt = (chain: Chain, hash: Hash) =>
  Effect.gen(function* () {
    const publicClient = yield* getPublicClient(chain)
    return yield* Effect.tryPromise({
      try: () => publicClient.waitForTransactionReceipt({ hash }),
      catch: err =>
        new WaitForTransactionReceiptError({ cause: err as WaitForTransactionReceiptErrorType })
    })
  })
